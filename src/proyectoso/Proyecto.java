package proyectoso;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Oslo
 */
public class Proyecto extends javax.swing.JFrame {

    public ArrayList<proceso> procesos = new ArrayList<>();
    List<String> procesosLista = new ArrayList<String>();
    public int contadorProcesos = 0;
    public DefaultTableModel modeloTabla = new DefaultTableModel();
    public Proyecto() {
        initComponents();
        currentTime.start();
        reduceTimeProcess.start();
        modeloTabla.addColumn("Proceso");
        modeloTabla.addColumn("Inicio");
        modeloTabla.addColumn("Total");
        modeloTabla.addColumn("Restante");
        modeloTabla.addColumn("Fin");
        ControlTiempo.setModel(modeloTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CP = new javax.swing.JPanel();
        DireccionMemoria = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Proceso = new javax.swing.JTextField();
        HS = new javax.swing.JPanel();
        lblCurrentTime = new javax.swing.JLabel();
        CAL = new javax.swing.JPanel();
        iniciar = new javax.swing.JButton();
        iniciar1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCalendarizador = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        turnoProceso = new javax.swing.JTextField();
        CT = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ControlTiempo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contador de programa", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel1.setText("Direcci√≥n de Memoria:");

        jLabel2.setText("Proceso:");

        javax.swing.GroupLayout CPLayout = new javax.swing.GroupLayout(CP);
        CP.setLayout(CPLayout);
        CPLayout.setHorizontalGroup(
            CPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(CPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(23, 23, 23)
                        .addComponent(DireccionMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CPLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(99, 99, 99)
                        .addComponent(Proceso, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CPLayout.setVerticalGroup(
            CPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(CPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(DireccionMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(CPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2))
                    .addComponent(Proceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        HS.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hora del sistema", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), new java.awt.Color(204, 0, 0))); // NOI18N

        lblCurrentTime.setFont(new java.awt.Font("Noto Sans", 0, 48)); // NOI18N

        javax.swing.GroupLayout HSLayout = new javax.swing.GroupLayout(HS);
        HS.setLayout(HSLayout);
        HSLayout.setHorizontalGroup(
            HSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HSLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblCurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );
        HSLayout.setVerticalGroup(
            HSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HSLayout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addComponent(lblCurrentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        CAL.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calendarizador", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), new java.awt.Color(204, 0, 204))); // NOI18N

        iniciar.setText("Nuevo");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });

        iniciar1.setText("Interrupciones");

        lstCalendarizador.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Procesos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 12))); // NOI18N
        lstCalendarizador.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstCalendarizador);

        jLabel10.setText("Turno");

        javax.swing.GroupLayout CALLayout = new javax.swing.GroupLayout(CAL);
        CAL.setLayout(CALLayout);
        CALLayout.setHorizontalGroup(
            CALLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CALLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(CALLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CALLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel10))
                    .addComponent(turnoProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(CALLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iniciar1)
                    .addGroup(CALLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(iniciar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(CALLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        CALLayout.setVerticalGroup(
            CALLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CALLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(CALLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CALLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel10)
                        .addGap(4, 4, 4)
                        .addComponent(turnoProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CALLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(iniciar1))
                    .addComponent(iniciar)))
        );

        CT.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Control de tiempo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), new java.awt.Color(0, 153, 0))); // NOI18N
        CT.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ControlTiempo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Inicio", "Total", "Restante", "Fin"
            }
        ));
        ControlTiempo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(ControlTiempo);

        CT.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 320, 270));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(HS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CT, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(HS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CT, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        //Crear el proceso
        this.contadorProcesos++;
        proceso process = new proceso();
        process.setNombre("Proceso " + contadorProcesos);
        process.setHora(lblCurrentTime.getText());
        process.setTiempo(getRandomNumberInRange(5, 10));
        process.setEstado("Listo");
        procesos.add(process);
        /*
                Agrega los elementos de procesos a la lista
         */
        tablaProcesos(String.valueOf(process.getTiempo()));
        actualizarLista();
    }//GEN-LAST:event_iniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Proyecto().setVisible(true);
            }
        });
    }

    //Hilo (Timer) para ir colocando la hora actual, a raz√≥n de 1 segundo
    Timer currentTime = new Timer(1000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            DateFormat df = new SimpleDateFormat("HH:mm:ss");
            Date fecha = new Date();
            lblCurrentTime.setText(df.format(fecha));
        }
    });

    public void actualizarLista() {
        DefaultListModel modeloLista = new DefaultListModel();
        for (int x = 0; x < procesos.size(); x++) {
            modeloLista.addElement(procesos.get(x).getNombre() + "," + procesos.get(x).getTiempo() + "," + procesos.get(x).getEstado());
        }
        lstCalendarizador.setModel(modeloLista);
    }

    // Tabla para mostrar el proceso, cuando inicio, el tiempo total, cuanto resta y cuando termina
    public void tablaProcesos(String tiempoInicio) {
        Object[] object = new Object[5];     
        for (int x = 0; x < procesos.size(); x++) {
            object[0] = procesos.get(x).getNombre();
            object[1] = procesos.get(x).getHora();
            object[2] = tiempoInicio;
            object[3] = object[2];
            object[4] = "-";
        }
        //Se ingresa a una lista los procesos
        procesosLista.add(object[0].toString());
        modeloTabla.addRow(object);
    }

    public void setearEstados() {
        for (int x = 0; x < procesos.size(); x++) {
            procesos.get(x).setEstado("Listo");
        }
    }

    //Hilo para ir ejecutando los procesos
    //Disminuye los tiempos y va reduciendo su tiempo
    public int x = 0;
    Timer reduceTimeProcess = new Timer(500, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            setearEstados();
            actualizarLista();
            //Reducir el tiempo del proceso en un segundo
            if (x >= procesos.size()) {
                x = 0;
            } else {
                turnoProceso.setText(procesos.get(x).getNombre());
                procesos.get(x).setEstado("En ejecuci√≥n");
                int tiempoActual = procesos.get(x).getTiempo();
                procesos.get(x).setTiempo(tiempoActual - 1);
                actualizarLista();
                String temp = procesos.get(x).getNombre();
                //For para recorrer la lista de los procesos
                for (int i = 0; i < procesosLista.size(); i++) {
                    // If para comparar el proceso actual con el de la lista y colocar la diferencia de tiempo en la pocision debida
                    if (temp.equals(procesosLista.get(i))) {
                        ControlTiempo.setValueAt(tiempoActual - 1, i, 3);
                    }
                }
                /*
                Agrega los elementos de procesos a la lista
                 */
                if (procesos.get(x).getTiempo() <= 0) {
                    procesos.get(x).setEstado("Finalizado");
                    procesos.remove(x);
                    for (int i = 0; i < procesosLista.size(); i++) {
                        if (temp.equals(procesosLista.get(i))) {
                            ControlTiempo.setValueAt(lblCurrentTime.getText(), i, 4);
                        }
                    }
                    turnoProceso.setText("");
                    actualizarLista();
                }
                x++;
            }
        }
    });

    private static int getRandomNumberInRange(int min, int max) {
        if (min >= max) {
            throw new IllegalArgumentException("max must be greater than min");
        }

        Random r = new Random();
        return r.nextInt((max - min) + 1) + min;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CAL;
    private javax.swing.JPanel CP;
    private javax.swing.JPanel CT;
    private javax.swing.JTable ControlTiempo;
    private javax.swing.JTextField DireccionMemoria;
    private javax.swing.JPanel HS;
    private javax.swing.JTextField Proceso;
    private javax.swing.JButton iniciar;
    private javax.swing.JButton iniciar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCurrentTime;
    private javax.swing.JList<String> lstCalendarizador;
    private javax.swing.JTextField turnoProceso;
    // End of variables declaration//GEN-END:variables
}
