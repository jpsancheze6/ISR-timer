package proyectoso;

import java.awt.AWTException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

public class Proyecto extends javax.swing.JFrame {

    public ArrayList<proceso> procesos = new ArrayList<>();
    List<String> procesosLista = new ArrayList<String>();
    public int contadorProcesos = 0;
    public DefaultTableModel modeloTabla = new DefaultTableModel();

    public Proyecto() {
        initComponents();
        currentTime.start();
        reduceTimeProcess.start();
        modeloTabla.addColumn("Proceso");
        modeloTabla.addColumn("Inicio");
        modeloTabla.addColumn("Total");
        modeloTabla.addColumn("Restante");
        modeloTabla.addColumn("Fin");
        ControlTiempo.setModel(modeloTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        txtDireccionMemoria = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtProcesoPC = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblCurrentTime = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        iniciar = new javax.swing.JButton();
        iniciar1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCalendarizador = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        turnoProceso = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ControlTiempo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 770, 10));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 10, 550));

        jLabel1.setText("Dirección de Memoria:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));
        getContentPane().add(txtDireccionMemoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 104, -1));

        jLabel2.setText("Proceso:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, -1, -1));
        getContentPane().add(txtProcesoPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, 104, -1));

        jLabel3.setText("Contador del Programa");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, -1, -1));

        lblCurrentTime.setFont(new java.awt.Font("Noto Sans", 0, 48)); // NOI18N
        getContentPane().add(lblCurrentTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, 282, 66));

        jLabel6.setText("Hora del Sistema");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, -1, -1));

        jLabel8.setText("Calendarizador");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 250, -1, -1));

        iniciar.setText("Nuevo");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });
        getContentPane().add(iniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 470, -1, -1));

        iniciar1.setText("Interrupciones");
        iniciar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciar1ActionPerformed(evt);
            }
        });
        getContentPane().add(iniciar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 510, -1, -1));

        lstCalendarizador.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstCalendarizador);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, 284, -1));

        jLabel9.setText("Procesos:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, -1, -1));

        jLabel10.setText("Turno:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 470, -1, -1));
        getContentPane().add(turnoProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 490, 146, -1));

        jLabel11.setText("Control de Tiempo");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 250, -1, -1));

        ControlTiempo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Inicio", "Total", "Restante", "Fin"
            }
        ));
        ControlTiempo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(ControlTiempo);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 280, 370, 246));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        //Crear el proceso
        this.contadorProcesos++;
        proceso process = new proceso();
        process.setNombre("Proceso " + contadorProcesos);
        process.setHora(lblCurrentTime.getText());
        process.setTiempo(getRandomNumberInRange(5, 10));
        process.setEstado("Listo");
        procesos.add(process);
        /*
                Agrega los elementos de procesos a la lista
         */
        tablaProcesos(String.valueOf(process.getTiempo()));
        actualizarLista();
    }//GEN-LAST:event_iniciarActionPerformed

    private void iniciar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciar1ActionPerformed

        //Generar interrupción
        //reduceTimeProcess
        try {
            procesos.get(x).setEstado("Bloqueado");
            actualizarLista();
            reduceTimeProcess.stop();
            
            generarInterrupcion();
            
        } catch (InterruptedException ex) {
            Logger.getLogger(Proyecto.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AWTException ex) {
            Logger.getLogger(Proyecto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_iniciar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Proyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Proyecto().setVisible(true);
            }
        });
    }

    //Hilo (Timer) para ir colocando la hora actual, a razón de 1 segundo
    Timer currentTime = new Timer(1000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            DateFormat df = new SimpleDateFormat("HH:mm:ss");
            Date fecha = new Date();
            lblCurrentTime.setText(df.format(fecha));
        }
    });

    public void generarInterrupcion() throws InterruptedException, AWTException{
        int numeroAleatorio = getRandomNumberInRange(100, 1000);
        String cadena = "Se activó la interrupción por " + numeroAleatorio + " ms.";
        Thread.sleep(numeroAleatorio*10);
        
        reduceTimeProcess.start();
        procesos.get(x).setEstado("Listo");
        actualizarLista();
        JOptionPane.showMessageDialog(null, cadena);
    }
    
    public void actualizarLista() {
        DefaultListModel modeloLista = new DefaultListModel();
        for (int x = 0; x < procesos.size(); x++) {
            modeloLista.addElement(procesos.get(x).getNombre() + ",  " + procesos.get(x).getEstado());
        }
        lstCalendarizador.setModel(modeloLista);
    }

    // Tabla para mostrar el proceso, cuando inicio, el tiempo total, cuanto resta y cuando termina
    public void tablaProcesos(String tiempoInicio) {
        Object[] object = new Object[5];
        for (int x = 0; x < procesos.size(); x++) {
            object[0] = procesos.get(x).getNombre();
            object[1] = procesos.get(x).getHora();
            object[2] = tiempoInicio;
            object[3] = object[2];
            object[4] = "-";
        }
        //Se ingresa a una lista los procesos
        procesosLista.add(object[0].toString());
        modeloTabla.addRow(object);
    }

    public void setearEstados() {
        for (int x = 0; x < procesos.size(); x++) {
            procesos.get(x).setEstado("Listo");
        }
    }

    //Hilo para ir ejecutando los procesos
    //Disminuye los tiempos y va reduciendo su tiempo
    public int x = 0;
    Timer reduceTimeProcess = new Timer(500, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            setearEstados();
            actualizarLista();
            int tamaño = ControlTiempo.getRowCount();
            //Reducir el tiempo del proceso en un segundo
            if (x >= procesos.size()) {
                x = 0;
            } else {
                //Colcoar valores
                turnoProceso.setText(procesos.get(x).getNombre());
                txtProcesoPC.setText(procesos.get(x).getNombre());
                //txtDireccionMemoria.setText(Integer.toHexString(System.identityHashCode(procesos.get(x))));
                txtDireccionMemoria.setText(Integer.toHexString(procesos.get(x).hashCode()));

                procesos.get(x).setEstado("En ejecución");
                int tiempoActual = procesos.get(x).getTiempo();
                procesos.get(x).setTiempo(tiempoActual - 1);
                actualizarLista();
                String temp = procesos.get(x).getNombre();
                //For para recorrer la lista de los procesos
                for (int i = 0; i < procesosLista.size(); i++) {
                    // If para comparar el proceso actual con el de la lista y colocar la diferencia de tiempo en la pocision debida
                    if (temp.equals(procesosLista.get(i))) {
                        ControlTiempo.setValueAt(tiempoActual - 1, i, 3);
                    }
                }
                /*
                Agrega los elementos de procesos a la lista
                 */
                if (procesos.get(x).getTiempo() <= 0) {
                    procesos.get(x).setEstado("Finalizado");
                    procesos.remove(x);
                    for (int i = 0; i < procesosLista.size(); i++) {
                        if (temp.equals(procesosLista.get(i))) {
                            ControlTiempo.setValueAt(lblCurrentTime.getText(), i, 4);
                        }
                    }
                    turnoProceso.setText("");
                    txtProcesoPC.setText("");
                    txtDireccionMemoria.setText("");
                    actualizarLista();
                }
                x++;
            }
            
        }
    });

    private static int getRandomNumberInRange(int min, int max) {
        if (min >= max) {
            throw new IllegalArgumentException("max must be greater than min");
        }

        Random r = new Random();
        return r.nextInt((max - min) + 1) + min;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ControlTiempo;
    private javax.swing.JButton iniciar;
    private javax.swing.JButton iniciar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblCurrentTime;
    private javax.swing.JList<String> lstCalendarizador;
    private javax.swing.JTextField turnoProceso;
    private javax.swing.JTextField txtDireccionMemoria;
    private javax.swing.JTextField txtProcesoPC;
    // End of variables declaration//GEN-END:variables
}
